// templates/pythoneda/FlakeNix.stg
//
// This file defines the template for PythonEDA-related Nix flakes.
//
// Copyright (C) 2024-today rydnr's pythoneda-tools-artifact/new-domain
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
group FlakeNix;

inputs(deps) ::= <<
    <deps: { dep | <input(dep=dep)>
}>
>>

input(dep) ::= <<
<dep.name> = {
  url = "<dep.url>";
  <other_follows(dep=dep)>};
>>

other_follows(dep) ::= <<
<dep.follows: { other | inputs.<other.name>.follows = "<other.name>";
}>
>>

declaring_package_inputs_as_parameters(flake) ::= <<
<flake.package_inputs: { dep | , <dep.name> } >
>>

package_inputs_version_pyproject_declaration(flake) ::= <<
<flake.package_inputs: { dep | <dep.name_in_camel_case> = <dep.name>.version;
}>
>>

package_inputs_as_build_inputs(flake) ::= <<
<flake.package_inputs: { dep | <dep.name>
}>
>>

package_inputs_as_parameters_for_python38(flake) ::= <<
<flake.package_inputs: { dep |
<dep.name> = <dep.name>.packages.${system}.<dep.name>-python38;
}>
>>

package_inputs_as_parameters_for_python39(flake) ::= <<
<flake.package_inputs: { dep |
<dep.name> = <dep.name>.packages.${system}.<dep.name>-python39;
}>
>>

package_inputs_as_parameters_for_python310(flake) ::= <<
<flake.package_inputs: { dep |
<dep.name> = <dep.name>.packages.${system}.<dep.name>-python310;
}>
>>

package_inputs_as_parameters_for_python311(flake) ::= <<
<flake.package_inputs: { dep |
<dep.name> = <dep.name>.packages.${system}.<dep.name>-python311;
}>
>>

//  root template
//  - flake: The flake.
root(flake) ::= <<
# <flake.name>/flake.nix
#
# This file defines a nix flake for <flake.name>-<flake.version>.
#
<flake.license_text_with_hash>
{
  description = "<flake.description>";
  inputs = rec {
<inputs(deps=flake.inputs)>  };
  outputs = inputs:
    with inputs;
    let
      defaultSystems = flake-utils.lib.defaultSystems;
      supportedSystems = if builtins.elem "armv6l-linux" defaultSystems then
        defaultSystems
      else
        defaultSystems ++ [ "armv6l-linux" ];
    in flake-utils.lib.eachSystem supportedSystems (system:
      let
        org = "<flake.org>";
        repo = "<flake.name>";
        version = "<flake.version>";
        sha256 = "";
        pname = "${org}-${repo}";
        pythonpackage = "<flake.package>";
        package = builtins.replaceStrings [ "." ] [ "/" ] pythonpackage;
        entrypoint = "<flake.name_in_snake_case>_app";
        description = "<flake.description>";
        license = pkgs.lib.licenses.<flake.license_id>;
        maintainers = [ <flake.maintainers: { maintainer | "<maintainer>" }> ];
        archRole = "<flake.arch_role>";
        space = "<flake.pescio_space>";
        layer = "<flake.hexagonal_layer>";
        nixosVersion = builtins.readFile "${nixos}/.version";
        nixpkgsRelease =
          builtins.replaceStrings [ "\n" ] [ "" ] "nixos-${nixosVersion}";
        shared = import "${pythoneda-shared-banner}/nix/shared.nix";
        pkgs = import nixos { inherit system; };
        <flake.name>-for = { python <declaring_package_inputs_as_parameters(flake)> }:
          let
            pnameWithUnderscores =
              builtins.replaceStrings [ "-" ] [ "_" ] pname;
            pythonVersionParts = builtins.splitVersion python.version;
            pythonMajorVersion = builtins.head pythonVersionParts;
            pythonMajorMinorVersion =
              "${pythonMajorVersion}.${builtins.elemAt pythonVersionParts 1}";
            wheelName =
              "${pnameWithUnderscores}-${version}-py${pythonMajorVersion}-none-any.whl";
            banner_file = "${package}/<flake.name_in_snake_case>_banner.py";
            banner_class = "<flake.name_in_camel_case>Banner";
          in python.pkgs.buildPythonPackage rec {
            inherit pname version;
            projectDir = ./.;
            pyprojectTemplateFile = ./pyprojecttoml.template;
            pyprojectTemplate = pkgs.substituteAll {
              authors = builtins.concatStringsSep ","
                (map (item: ''"${item}"'') maintainers);
              desc = description;
              inherit homepage pname pythonMajorMinorVersion pythonpackage
                version;
              <package_inputs_version_pyproject_declaration(flake)>
              package = builtins.replaceStrings [ "." ] [ "/" ] pythonpackage;
              src = pyprojectTemplateFile;
            };
            bannerTemplateFile =
              "${pythoneda-shared-banner}/templates/banner.py.template";
            bannerTemplate = pkgs.substituteAll {
              project_name = pname;
              file_path = banner_file;
              inherit banner_class org repo;
              tag = version;
              pescio_space = space;
              arch_role = archRole;
              hexagonal_layer = layer;
              python_version = pythonMajorMinorVersion;
              nixpkgs_release = nixpkgsRelease;
              src = bannerTemplateFile;
            };

            entrypointTemplateFile =
              "${pythoneda-shared-banner}/templates/entrypoint.sh.template";
            entrypointTemplate = pkgs.substituteAll {
              arch_role = archRole;
              hexagonal_layer = layer;
              nixpkgs_release = nixpkgsRelease;
              inherit homepage maintainers org python repo version;
              pescio_space = space;
              python_version = pythonMajorMinorVersion;
              pythoneda_shared_banner = pythoneda-shared-banner;
              pythoneda_shared_domain = pythoneda-shared-domain;
              src = entrypointTemplateFile;
            };
            src = pkgs.fetchFromGitHub {
              owner = org;
              rev = version;
              inherit repo sha256;
            };

            format = "pyproject";

            nativeBuildInputs = with python.pkgs; [ pip poetry-core ];
            propagatedBuildInputs = with python.pkgs; [
              <package_inputs_as_build_inputs(flake)>
            ];

            # pythonImportsCheck = [ pythonpackage ];

            unpackPhase = ''
              cp -r ${src} .
              sourceRoot=$(ls | grep -v env-vars)
              find $sourceRoot -type d -exec chmod 777 {} \;
              cp ${pyprojectTemplate} $sourceRoot/pyproject.toml
              cp ${bannerTemplate} $sourceRoot/${banner_file}
              cp ${entrypointTemplate} $sourceRoot/entrypoint.sh
            '';

            postPatch = ''
              substituteInPlace /build/$sourceRoot/entrypoint.sh \
                --replace "@SOURCE@" "$out/bin/${entrypoint}.sh" \
                --replace "@PYTHONPATH@" "$PYTHONPATH:$out/lib/python${pythonMajorMinorVersion}/site-packages" \
                --replace "@CUSTOM_CONTENT@" "" \
                --replace "@ENTRYPOINT@" "$out/lib/python${pythonMajorMinorVersion}/site-packages/${package}/application/${entrypoint}.py" \
                --replace "@BANNER@" "$out/bin/banner.sh"
            '';

            postInstall = ''
              pushd /build/$sourceRoot
              for f in $(find . -name '__init__.py'); do
                if [[ ! -e $out/lib/python${pythonMajorMinorVersion}/site-packages/$f ]]; then
                  cp $f $out/lib/python${pythonMajorMinorVersion}/site-packages/$f;
                fi
              done
              popd
              mkdir $out/dist $out/bin
              cp dist/${wheelName} $out/dist
              cp /build/$sourceRoot/entrypoint.sh $out/bin/${entrypoint}.sh
              chmod +x $out/bin/${entrypoint}.sh
              echo '#!/usr/bin/env sh' \> $out/bin/banner.sh
              echo "export PYTHONPATH=$PYTHONPATH" \>\> $out/bin/banner.sh
              echo "${python}/bin/python $out/lib/python${pythonMajorMinorVersion}/site-packages/${banner_file} \$@" \>\> $out/bin/banner.sh
              chmod +x $out/bin/banner.sh
            '';

            meta = with pkgs.lib; {
              inherit description homepage license maintainers;
            };
          };
      in rec {
        apps = rec {
          default = <flake.name>-default;
          <flake.name>-default = <flake.name>-python311;
          <flake.name>-python38 = shared.app-for {
            package = self.packages.${system}.<flake.name>-python38;
            inherit entrypoint;
          };
          <flake.name>-python39 = shared.app-for {
            package = self.packages.${system}.<flake.name>-python39;
            inherit entrypoint;
          };
          <flake.name>-python310 = shared.app-for {
            package = self.packages.${system}.<flake.name>-python310;
            inherit entrypoint;
          };
          <flake.name>-python311 = shared.app-for {
            package = self.packages.${system}.<flake.name>-python311;
            inherit entrypoint;
          };
        };
        defaultApp = apps.default;
        defaultPackage = packages.default;
        packages = rec {
          default = <flake.name>-default;
          <flake.name>-default = <flake.name>-python311;
          <flake.name>-python38 = <flake.name>-for {
            python = pkgs.python38;
            <package_inputs_as_parameters_for_python38(flake)>          };
          <flake.name>-python39 = <flake.name>-for {
            python = pkgs.python39;
            <package_inputs_as_parameters_for_python39(flake)>          };
          <flake.name>-python310 = <flake.name>-for {
            python = pkgs.python310;
            <package_inputs_as_parameters_for_python310(flake)>          };
          <flake.name>-python311 = <flake.name>-for {
            python = pkgs.python311;
            <package_inputs_as_parameters_for_python311(flake)>          };
        };
      });
}
>>
